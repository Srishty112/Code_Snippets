long long fastpow(long long a, long long b, long long MOD)
{
    int res = 1;
    while (b)
    {
        if (b & 1 !=0)
            res = (res * a)%MOD;
        b = b >> 1;     
        a = (a * a)%MOD;
    }
    return res;
}

int gcd(int a, int b)
{
    if(b==0)return a;
    return gcd(b, a%b);
}

long long fact(int a, long long MOD)
{
    long long res=1;
    while(a)
    {
        res=(res*a)%MOD;
        a--;
    }
    return res;
}

long long modInverse(long long a, long long MOD)
{
    return fastpow(a, MOD-2, MOD);
}


int nCr(int n, int r, int MOD)
{
    if (n < r)  return 0;
    
    // Base case
    if (r == 0) return 1;
 
    long long factn= fact(n, MOD);
    long long factr= fact(r, MOD);
    long long factn_r= fact(n-r, MOD);
    return (factn * modInverse(factr, MOD) % MOD  * modInverse(factn_r, MOD) % MOD) %  MOD;
}
